# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rainbowsdk.configuration import Configuration


class ServicesEasyMintMetaDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chain': 'str',
        'description': 'str',
        'file_url': 'str',
        'mint_to_address': 'str',
        'name': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'description': 'description',
        'file_url': 'file_url',
        'mint_to_address': 'mint_to_address',
        'name': 'name'
    }

    def __init__(self, chain=None, description=None, file_url=None, mint_to_address=None, name=None, local_vars_configuration=None):  # noqa: E501
        """ServicesEasyMintMetaDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._chain = None
        self._description = None
        self._file_url = None
        self._mint_to_address = None
        self._name = None
        self.discriminator = None

        self.chain = chain
        self.description = description
        self.file_url = file_url
        self.mint_to_address = mint_to_address
        self.name = name

    @property
    def chain(self):
        """Gets the chain of this ServicesEasyMintMetaDto.  # noqa: E501


        :return: The chain of this ServicesEasyMintMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ServicesEasyMintMetaDto.


        :param chain: The chain of this ServicesEasyMintMetaDto.  # noqa: E501
        :type chain: str
        """
        if self.local_vars_configuration.client_side_validation and chain is None:  # noqa: E501
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def description(self):
        """Gets the description of this ServicesEasyMintMetaDto.  # noqa: E501


        :return: The description of this ServicesEasyMintMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServicesEasyMintMetaDto.


        :param description: The description of this ServicesEasyMintMetaDto.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def file_url(self):
        """Gets the file_url of this ServicesEasyMintMetaDto.  # noqa: E501


        :return: The file_url of this ServicesEasyMintMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this ServicesEasyMintMetaDto.


        :param file_url: The file_url of this ServicesEasyMintMetaDto.  # noqa: E501
        :type file_url: str
        """
        if self.local_vars_configuration.client_side_validation and file_url is None:  # noqa: E501
            raise ValueError("Invalid value for `file_url`, must not be `None`")  # noqa: E501

        self._file_url = file_url

    @property
    def mint_to_address(self):
        """Gets the mint_to_address of this ServicesEasyMintMetaDto.  # noqa: E501


        :return: The mint_to_address of this ServicesEasyMintMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._mint_to_address

    @mint_to_address.setter
    def mint_to_address(self, mint_to_address):
        """Sets the mint_to_address of this ServicesEasyMintMetaDto.


        :param mint_to_address: The mint_to_address of this ServicesEasyMintMetaDto.  # noqa: E501
        :type mint_to_address: str
        """
        if self.local_vars_configuration.client_side_validation and mint_to_address is None:  # noqa: E501
            raise ValueError("Invalid value for `mint_to_address`, must not be `None`")  # noqa: E501

        self._mint_to_address = mint_to_address

    @property
    def name(self):
        """Gets the name of this ServicesEasyMintMetaDto.  # noqa: E501


        :return: The name of this ServicesEasyMintMetaDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesEasyMintMetaDto.


        :param name: The name of this ServicesEasyMintMetaDto.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesEasyMintMetaDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesEasyMintMetaDto):
            return True

        return self.to_dict() != other.to_dict()
