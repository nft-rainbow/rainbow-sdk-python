# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rainbowsdk.configuration import Configuration


class ModelsBurnTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'int',
        'app_id': 'int',
        'chain_id': 'int',
        'chain_type': 'int',
        'contract': 'str',
        'contract_type': 'int',
        'created_at': 'str',
        'deleted_at': 'GormDeletedAt',
        'error': 'str',
        'hash': 'str',
        'id': 'int',
        'status': 'int',
        'token_id': 'str',
        'tx_id': 'int',
        'updated_at': 'str',
        'user': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'app_id': 'app_id',
        'chain_id': 'chain_id',
        'chain_type': 'chain_type',
        'contract': 'contract',
        'contract_type': 'contract_type',
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'error': 'error',
        'hash': 'hash',
        'id': 'id',
        'status': 'status',
        'token_id': 'token_id',
        'tx_id': 'tx_id',
        'updated_at': 'updated_at',
        'user': 'user'
    }

    def __init__(self, amount=None, app_id=None, chain_id=None, chain_type=None, contract=None, contract_type=None, created_at=None, deleted_at=None, error=None, hash=None, id=None, status=None, token_id=None, tx_id=None, updated_at=None, user=None, local_vars_configuration=None):  # noqa: E501
        """ModelsBurnTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._app_id = None
        self._chain_id = None
        self._chain_type = None
        self._contract = None
        self._contract_type = None
        self._created_at = None
        self._deleted_at = None
        self._error = None
        self._hash = None
        self._id = None
        self._status = None
        self._token_id = None
        self._tx_id = None
        self._updated_at = None
        self._user = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if app_id is not None:
            self.app_id = app_id
        if chain_id is not None:
            self.chain_id = chain_id
        if chain_type is not None:
            self.chain_type = chain_type
        if contract is not None:
            self.contract = contract
        if contract_type is not None:
            self.contract_type = contract_type
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if error is not None:
            self.error = error
        if hash is not None:
            self.hash = hash
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if token_id is not None:
            self.token_id = token_id
        if tx_id is not None:
            self.tx_id = tx_id
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user

    @property
    def amount(self):
        """Gets the amount of this ModelsBurnTask.  # noqa: E501


        :return: The amount of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ModelsBurnTask.


        :param amount: The amount of this ModelsBurnTask.  # noqa: E501
        :type amount: int
        """

        self._amount = amount

    @property
    def app_id(self):
        """Gets the app_id of this ModelsBurnTask.  # noqa: E501


        :return: The app_id of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ModelsBurnTask.


        :param app_id: The app_id of this ModelsBurnTask.  # noqa: E501
        :type app_id: int
        """

        self._app_id = app_id

    @property
    def chain_id(self):
        """Gets the chain_id of this ModelsBurnTask.  # noqa: E501


        :return: The chain_id of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this ModelsBurnTask.


        :param chain_id: The chain_id of this ModelsBurnTask.  # noqa: E501
        :type chain_id: int
        """

        self._chain_id = chain_id

    @property
    def chain_type(self):
        """Gets the chain_type of this ModelsBurnTask.  # noqa: E501


        :return: The chain_type of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._chain_type

    @chain_type.setter
    def chain_type(self, chain_type):
        """Sets the chain_type of this ModelsBurnTask.


        :param chain_type: The chain_type of this ModelsBurnTask.  # noqa: E501
        :type chain_type: int
        """

        self._chain_type = chain_type

    @property
    def contract(self):
        """Gets the contract of this ModelsBurnTask.  # noqa: E501


        :return: The contract of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this ModelsBurnTask.


        :param contract: The contract of this ModelsBurnTask.  # noqa: E501
        :type contract: str
        """

        self._contract = contract

    @property
    def contract_type(self):
        """Gets the contract_type of this ModelsBurnTask.  # noqa: E501


        :return: The contract_type of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this ModelsBurnTask.


        :param contract_type: The contract_type of this ModelsBurnTask.  # noqa: E501
        :type contract_type: int
        """

        self._contract_type = contract_type

    @property
    def created_at(self):
        """Gets the created_at of this ModelsBurnTask.  # noqa: E501


        :return: The created_at of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsBurnTask.


        :param created_at: The created_at of this ModelsBurnTask.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ModelsBurnTask.  # noqa: E501


        :return: The deleted_at of this ModelsBurnTask.  # noqa: E501
        :rtype: GormDeletedAt
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ModelsBurnTask.


        :param deleted_at: The deleted_at of this ModelsBurnTask.  # noqa: E501
        :type deleted_at: GormDeletedAt
        """

        self._deleted_at = deleted_at

    @property
    def error(self):
        """Gets the error of this ModelsBurnTask.  # noqa: E501


        :return: The error of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ModelsBurnTask.


        :param error: The error of this ModelsBurnTask.  # noqa: E501
        :type error: str
        """

        self._error = error

    @property
    def hash(self):
        """Gets the hash of this ModelsBurnTask.  # noqa: E501


        :return: The hash of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ModelsBurnTask.


        :param hash: The hash of this ModelsBurnTask.  # noqa: E501
        :type hash: str
        """

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this ModelsBurnTask.  # noqa: E501


        :return: The id of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsBurnTask.


        :param id: The id of this ModelsBurnTask.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this ModelsBurnTask.  # noqa: E501

        0-pending, 1-success, 2-failed  # noqa: E501

        :return: The status of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelsBurnTask.

        0-pending, 1-success, 2-failed  # noqa: E501

        :param status: The status of this ModelsBurnTask.  # noqa: E501
        :type status: int
        """

        self._status = status

    @property
    def token_id(self):
        """Gets the token_id of this ModelsBurnTask.  # noqa: E501


        :return: The token_id of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ModelsBurnTask.


        :param token_id: The token_id of this ModelsBurnTask.  # noqa: E501
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def tx_id(self):
        """Gets the tx_id of this ModelsBurnTask.  # noqa: E501


        :return: The tx_id of this ModelsBurnTask.  # noqa: E501
        :rtype: int
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this ModelsBurnTask.


        :param tx_id: The tx_id of this ModelsBurnTask.  # noqa: E501
        :type tx_id: int
        """

        self._tx_id = tx_id

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelsBurnTask.  # noqa: E501


        :return: The updated_at of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelsBurnTask.


        :param updated_at: The updated_at of this ModelsBurnTask.  # noqa: E501
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this ModelsBurnTask.  # noqa: E501


        :return: The user of this ModelsBurnTask.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ModelsBurnTask.


        :param user: The user of this ModelsBurnTask.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsBurnTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsBurnTask):
            return True

        return self.to_dict() != other.to_dict()
