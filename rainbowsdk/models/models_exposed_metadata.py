# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rainbowsdk.configuration import Configuration


class ModelsExposedMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'animation_url': 'str',
        'attributes': 'list[ModelsExposedMetadataAttribute]',
        'created_at': 'str',
        'deleted_at': 'GormDeletedAt',
        'description': 'str',
        'external_link': 'str',
        'id': 'int',
        'image': 'str',
        'metadata_id': 'str',
        'name': 'str',
        'updated_at': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'animation_url': 'animation_url',
        'attributes': 'attributes',
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'description': 'description',
        'external_link': 'external_link',
        'id': 'id',
        'image': 'image',
        'metadata_id': 'metadata_id',
        'name': 'name',
        'updated_at': 'updated_at',
        'uri': 'uri'
    }

    def __init__(self, animation_url=None, attributes=None, created_at=None, deleted_at=None, description=None, external_link=None, id=None, image=None, metadata_id=None, name=None, updated_at=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """ModelsExposedMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._animation_url = None
        self._attributes = None
        self._created_at = None
        self._deleted_at = None
        self._description = None
        self._external_link = None
        self._id = None
        self._image = None
        self._metadata_id = None
        self._name = None
        self._updated_at = None
        self._uri = None
        self.discriminator = None

        if animation_url is not None:
            self.animation_url = animation_url
        if attributes is not None:
            self.attributes = attributes
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        self.description = description
        if external_link is not None:
            self.external_link = external_link
        if id is not None:
            self.id = id
        self.image = image
        if metadata_id is not None:
            self.metadata_id = metadata_id
        self.name = name
        if updated_at is not None:
            self.updated_at = updated_at
        if uri is not None:
            self.uri = uri

    @property
    def animation_url(self):
        """Gets the animation_url of this ModelsExposedMetadata.  # noqa: E501


        :return: The animation_url of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._animation_url

    @animation_url.setter
    def animation_url(self, animation_url):
        """Sets the animation_url of this ModelsExposedMetadata.


        :param animation_url: The animation_url of this ModelsExposedMetadata.  # noqa: E501
        :type animation_url: str
        """

        self._animation_url = animation_url

    @property
    def attributes(self):
        """Gets the attributes of this ModelsExposedMetadata.  # noqa: E501


        :return: The attributes of this ModelsExposedMetadata.  # noqa: E501
        :rtype: list[ModelsExposedMetadataAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ModelsExposedMetadata.


        :param attributes: The attributes of this ModelsExposedMetadata.  # noqa: E501
        :type attributes: list[ModelsExposedMetadataAttribute]
        """

        self._attributes = attributes

    @property
    def created_at(self):
        """Gets the created_at of this ModelsExposedMetadata.  # noqa: E501


        :return: The created_at of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsExposedMetadata.


        :param created_at: The created_at of this ModelsExposedMetadata.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ModelsExposedMetadata.  # noqa: E501


        :return: The deleted_at of this ModelsExposedMetadata.  # noqa: E501
        :rtype: GormDeletedAt
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ModelsExposedMetadata.


        :param deleted_at: The deleted_at of this ModelsExposedMetadata.  # noqa: E501
        :type deleted_at: GormDeletedAt
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this ModelsExposedMetadata.  # noqa: E501


        :return: The description of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsExposedMetadata.


        :param description: The description of this ModelsExposedMetadata.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def external_link(self):
        """Gets the external_link of this ModelsExposedMetadata.  # noqa: E501


        :return: The external_link of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._external_link

    @external_link.setter
    def external_link(self, external_link):
        """Sets the external_link of this ModelsExposedMetadata.


        :param external_link: The external_link of this ModelsExposedMetadata.  # noqa: E501
        :type external_link: str
        """

        self._external_link = external_link

    @property
    def id(self):
        """Gets the id of this ModelsExposedMetadata.  # noqa: E501


        :return: The id of this ModelsExposedMetadata.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsExposedMetadata.


        :param id: The id of this ModelsExposedMetadata.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ModelsExposedMetadata.  # noqa: E501


        :return: The image of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ModelsExposedMetadata.


        :param image: The image of this ModelsExposedMetadata.  # noqa: E501
        :type image: str
        """
        if self.local_vars_configuration.client_side_validation and image is None:  # noqa: E501
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def metadata_id(self):
        """Gets the metadata_id of this ModelsExposedMetadata.  # noqa: E501


        :return: The metadata_id of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._metadata_id

    @metadata_id.setter
    def metadata_id(self, metadata_id):
        """Sets the metadata_id of this ModelsExposedMetadata.


        :param metadata_id: The metadata_id of this ModelsExposedMetadata.  # noqa: E501
        :type metadata_id: str
        """

        self._metadata_id = metadata_id

    @property
    def name(self):
        """Gets the name of this ModelsExposedMetadata.  # noqa: E501


        :return: The name of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsExposedMetadata.


        :param name: The name of this ModelsExposedMetadata.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelsExposedMetadata.  # noqa: E501


        :return: The updated_at of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelsExposedMetadata.


        :param updated_at: The updated_at of this ModelsExposedMetadata.  # noqa: E501
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def uri(self):
        """Gets the uri of this ModelsExposedMetadata.  # noqa: E501


        :return: The uri of this ModelsExposedMetadata.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ModelsExposedMetadata.


        :param uri: The uri of this ModelsExposedMetadata.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsExposedMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsExposedMetadata):
            return True

        return self.to_dict() != other.to_dict()
