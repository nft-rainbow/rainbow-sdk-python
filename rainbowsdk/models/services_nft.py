# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rainbowsdk.configuration import Configuration


class ServicesNFT(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contract_address': 'str',
        'owner': 'str',
        'token_id': 'str'
    }

    attribute_map = {
        'contract_address': 'contract_address',
        'owner': 'owner',
        'token_id': 'token_id'
    }

    def __init__(self, contract_address=None, owner=None, token_id=None, local_vars_configuration=None):  # noqa: E501
        """ServicesNFT - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._contract_address = None
        self._owner = None
        self._token_id = None
        self.discriminator = None

        if contract_address is not None:
            self.contract_address = contract_address
        if owner is not None:
            self.owner = owner
        if token_id is not None:
            self.token_id = token_id

    @property
    def contract_address(self):
        """Gets the contract_address of this ServicesNFT.  # noqa: E501


        :return: The contract_address of this ServicesNFT.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this ServicesNFT.


        :param contract_address: The contract_address of this ServicesNFT.  # noqa: E501
        :type contract_address: str
        """

        self._contract_address = contract_address

    @property
    def owner(self):
        """Gets the owner of this ServicesNFT.  # noqa: E501


        :return: The owner of this ServicesNFT.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ServicesNFT.


        :param owner: The owner of this ServicesNFT.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def token_id(self):
        """Gets the token_id of this ServicesNFT.  # noqa: E501


        :return: The token_id of this ServicesNFT.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ServicesNFT.


        :param token_id: The token_id of this ServicesNFT.  # noqa: E501
        :type token_id: str
        """

        self._token_id = token_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesNFT):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesNFT):
            return True

        return self.to_dict() != other.to_dict()
