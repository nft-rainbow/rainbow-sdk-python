# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rainbowsdk.configuration import Configuration


class ServicesTxResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_msg': 'str',
        'hash': 'str',
        'is_finalized': 'bool',
        'is_success': 'bool',
        'state_code': 'int',
        'state_msg': 'str'
    }

    attribute_map = {
        'error_msg': 'error_msg',
        'hash': 'hash',
        'is_finalized': 'is_finalized',
        'is_success': 'is_success',
        'state_code': 'state_code',
        'state_msg': 'state_msg'
    }

    def __init__(self, error_msg=None, hash=None, is_finalized=None, is_success=None, state_code=None, state_msg=None, local_vars_configuration=None):  # noqa: E501
        """ServicesTxResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._error_msg = None
        self._hash = None
        self._is_finalized = None
        self._is_success = None
        self._state_code = None
        self._state_msg = None
        self.discriminator = None

        if error_msg is not None:
            self.error_msg = error_msg
        if hash is not None:
            self.hash = hash
        if is_finalized is not None:
            self.is_finalized = is_finalized
        if is_success is not None:
            self.is_success = is_success
        if state_code is not None:
            self.state_code = state_code
        if state_msg is not None:
            self.state_msg = state_msg

    @property
    def error_msg(self):
        """Gets the error_msg of this ServicesTxResp.  # noqa: E501


        :return: The error_msg of this ServicesTxResp.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this ServicesTxResp.


        :param error_msg: The error_msg of this ServicesTxResp.  # noqa: E501
        :type error_msg: str
        """

        self._error_msg = error_msg

    @property
    def hash(self):
        """Gets the hash of this ServicesTxResp.  # noqa: E501


        :return: The hash of this ServicesTxResp.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ServicesTxResp.


        :param hash: The hash of this ServicesTxResp.  # noqa: E501
        :type hash: str
        """

        self._hash = hash

    @property
    def is_finalized(self):
        """Gets the is_finalized of this ServicesTxResp.  # noqa: E501


        :return: The is_finalized of this ServicesTxResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_finalized

    @is_finalized.setter
    def is_finalized(self, is_finalized):
        """Sets the is_finalized of this ServicesTxResp.


        :param is_finalized: The is_finalized of this ServicesTxResp.  # noqa: E501
        :type is_finalized: bool
        """

        self._is_finalized = is_finalized

    @property
    def is_success(self):
        """Gets the is_success of this ServicesTxResp.  # noqa: E501


        :return: The is_success of this ServicesTxResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this ServicesTxResp.


        :param is_success: The is_success of this ServicesTxResp.  # noqa: E501
        :type is_success: bool
        """

        self._is_success = is_success

    @property
    def state_code(self):
        """Gets the state_code of this ServicesTxResp.  # noqa: E501


        :return: The state_code of this ServicesTxResp.  # noqa: E501
        :rtype: int
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this ServicesTxResp.


        :param state_code: The state_code of this ServicesTxResp.  # noqa: E501
        :type state_code: int
        """

        self._state_code = state_code

    @property
    def state_msg(self):
        """Gets the state_msg of this ServicesTxResp.  # noqa: E501


        :return: The state_msg of this ServicesTxResp.  # noqa: E501
        :rtype: str
        """
        return self._state_msg

    @state_msg.setter
    def state_msg(self, state_msg):
        """Sets the state_msg of this ServicesTxResp.


        :param state_msg: The state_msg of this ServicesTxResp.  # noqa: E501
        :type state_msg: str
        """

        self._state_msg = state_msg

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesTxResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesTxResp):
            return True

        return self.to_dict() != other.to_dict()
