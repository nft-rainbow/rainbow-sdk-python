# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rainbowsdk.configuration import Configuration


class ServicesContractDeployDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_sponsor': 'bool',
        'base_uri': 'str',
        'chain': 'str',
        'is_sponsor_for_all_user': 'bool',
        'name': 'str',
        'owner_address': 'str',
        'royalties_address': 'str',
        'royalties_bps': 'int',
        'symbol': 'str',
        'tokens_burnable': 'bool',
        'tokens_transferable_by_admin': 'bool',
        'tokens_transferable_by_user': 'bool',
        'transfer_cooldown_time': 'int',
        'type': 'str'
    }

    attribute_map = {
        'auto_sponsor': 'auto_sponsor',
        'base_uri': 'base_uri',
        'chain': 'chain',
        'is_sponsor_for_all_user': 'is_sponsor_for_all_user',
        'name': 'name',
        'owner_address': 'owner_address',
        'royalties_address': 'royalties_address',
        'royalties_bps': 'royalties_bps',
        'symbol': 'symbol',
        'tokens_burnable': 'tokens_burnable',
        'tokens_transferable_by_admin': 'tokens_transferable_by_admin',
        'tokens_transferable_by_user': 'tokens_transferable_by_user',
        'transfer_cooldown_time': 'transfer_cooldown_time',
        'type': 'type'
    }

    def __init__(self, auto_sponsor=None, base_uri=None, chain=None, is_sponsor_for_all_user=None, name=None, owner_address=None, royalties_address=None, royalties_bps=None, symbol=None, tokens_burnable=None, tokens_transferable_by_admin=None, tokens_transferable_by_user=None, transfer_cooldown_time=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ServicesContractDeployDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._auto_sponsor = None
        self._base_uri = None
        self._chain = None
        self._is_sponsor_for_all_user = None
        self._name = None
        self._owner_address = None
        self._royalties_address = None
        self._royalties_bps = None
        self._symbol = None
        self._tokens_burnable = None
        self._tokens_transferable_by_admin = None
        self._tokens_transferable_by_user = None
        self._transfer_cooldown_time = None
        self._type = None
        self.discriminator = None

        if auto_sponsor is not None:
            self.auto_sponsor = auto_sponsor
        if base_uri is not None:
            self.base_uri = base_uri
        self.chain = chain
        if is_sponsor_for_all_user is not None:
            self.is_sponsor_for_all_user = is_sponsor_for_all_user
        self.name = name
        if owner_address is not None:
            self.owner_address = owner_address
        if royalties_address is not None:
            self.royalties_address = royalties_address
        if royalties_bps is not None:
            self.royalties_bps = royalties_bps
        self.symbol = symbol
        if tokens_burnable is not None:
            self.tokens_burnable = tokens_burnable
        if tokens_transferable_by_admin is not None:
            self.tokens_transferable_by_admin = tokens_transferable_by_admin
        if tokens_transferable_by_user is not None:
            self.tokens_transferable_by_user = tokens_transferable_by_user
        if transfer_cooldown_time is not None:
            self.transfer_cooldown_time = transfer_cooldown_time
        self.type = type

    @property
    def auto_sponsor(self):
        """Gets the auto_sponsor of this ServicesContractDeployDto.  # noqa: E501

        default: true  # noqa: E501

        :return: The auto_sponsor of this ServicesContractDeployDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_sponsor

    @auto_sponsor.setter
    def auto_sponsor(self, auto_sponsor):
        """Sets the auto_sponsor of this ServicesContractDeployDto.

        default: true  # noqa: E501

        :param auto_sponsor: The auto_sponsor of this ServicesContractDeployDto.  # noqa: E501
        :type auto_sponsor: bool
        """

        self._auto_sponsor = auto_sponsor

    @property
    def base_uri(self):
        """Gets the base_uri of this ServicesContractDeployDto.  # noqa: E501


        :return: The base_uri of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this ServicesContractDeployDto.


        :param base_uri: The base_uri of this ServicesContractDeployDto.  # noqa: E501
        :type base_uri: str
        """

        self._base_uri = base_uri

    @property
    def chain(self):
        """Gets the chain of this ServicesContractDeployDto.  # noqa: E501


        :return: The chain of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ServicesContractDeployDto.


        :param chain: The chain of this ServicesContractDeployDto.  # noqa: E501
        :type chain: str
        """
        if self.local_vars_configuration.client_side_validation and chain is None:  # noqa: E501
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501
        allowed_values = ["conflux", "conflux_test"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and chain not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"  # noqa: E501
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def is_sponsor_for_all_user(self):
        """Gets the is_sponsor_for_all_user of this ServicesContractDeployDto.  # noqa: E501

        default: true  # noqa: E501

        :return: The is_sponsor_for_all_user of this ServicesContractDeployDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_sponsor_for_all_user

    @is_sponsor_for_all_user.setter
    def is_sponsor_for_all_user(self, is_sponsor_for_all_user):
        """Sets the is_sponsor_for_all_user of this ServicesContractDeployDto.

        default: true  # noqa: E501

        :param is_sponsor_for_all_user: The is_sponsor_for_all_user of this ServicesContractDeployDto.  # noqa: E501
        :type is_sponsor_for_all_user: bool
        """

        self._is_sponsor_for_all_user = is_sponsor_for_all_user

    @property
    def name(self):
        """Gets the name of this ServicesContractDeployDto.  # noqa: E501


        :return: The name of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesContractDeployDto.


        :param name: The name of this ServicesContractDeployDto.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_address(self):
        """Gets the owner_address of this ServicesContractDeployDto.  # noqa: E501


        :return: The owner_address of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """Sets the owner_address of this ServicesContractDeployDto.


        :param owner_address: The owner_address of this ServicesContractDeployDto.  # noqa: E501
        :type owner_address: str
        """

        self._owner_address = owner_address

    @property
    def royalties_address(self):
        """Gets the royalties_address of this ServicesContractDeployDto.  # noqa: E501


        :return: The royalties_address of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._royalties_address

    @royalties_address.setter
    def royalties_address(self, royalties_address):
        """Sets the royalties_address of this ServicesContractDeployDto.


        :param royalties_address: The royalties_address of this ServicesContractDeployDto.  # noqa: E501
        :type royalties_address: str
        """

        self._royalties_address = royalties_address

    @property
    def royalties_bps(self):
        """Gets the royalties_bps of this ServicesContractDeployDto.  # noqa: E501


        :return: The royalties_bps of this ServicesContractDeployDto.  # noqa: E501
        :rtype: int
        """
        return self._royalties_bps

    @royalties_bps.setter
    def royalties_bps(self, royalties_bps):
        """Sets the royalties_bps of this ServicesContractDeployDto.


        :param royalties_bps: The royalties_bps of this ServicesContractDeployDto.  # noqa: E501
        :type royalties_bps: int
        """

        self._royalties_bps = royalties_bps

    @property
    def symbol(self):
        """Gets the symbol of this ServicesContractDeployDto.  # noqa: E501


        :return: The symbol of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ServicesContractDeployDto.


        :param symbol: The symbol of this ServicesContractDeployDto.  # noqa: E501
        :type symbol: str
        """
        if self.local_vars_configuration.client_side_validation and symbol is None:  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def tokens_burnable(self):
        """Gets the tokens_burnable of this ServicesContractDeployDto.  # noqa: E501

        default: true  # noqa: E501

        :return: The tokens_burnable of this ServicesContractDeployDto.  # noqa: E501
        :rtype: bool
        """
        return self._tokens_burnable

    @tokens_burnable.setter
    def tokens_burnable(self, tokens_burnable):
        """Sets the tokens_burnable of this ServicesContractDeployDto.

        default: true  # noqa: E501

        :param tokens_burnable: The tokens_burnable of this ServicesContractDeployDto.  # noqa: E501
        :type tokens_burnable: bool
        """

        self._tokens_burnable = tokens_burnable

    @property
    def tokens_transferable_by_admin(self):
        """Gets the tokens_transferable_by_admin of this ServicesContractDeployDto.  # noqa: E501

        default: true  # noqa: E501

        :return: The tokens_transferable_by_admin of this ServicesContractDeployDto.  # noqa: E501
        :rtype: bool
        """
        return self._tokens_transferable_by_admin

    @tokens_transferable_by_admin.setter
    def tokens_transferable_by_admin(self, tokens_transferable_by_admin):
        """Sets the tokens_transferable_by_admin of this ServicesContractDeployDto.

        default: true  # noqa: E501

        :param tokens_transferable_by_admin: The tokens_transferable_by_admin of this ServicesContractDeployDto.  # noqa: E501
        :type tokens_transferable_by_admin: bool
        """

        self._tokens_transferable_by_admin = tokens_transferable_by_admin

    @property
    def tokens_transferable_by_user(self):
        """Gets the tokens_transferable_by_user of this ServicesContractDeployDto.  # noqa: E501

        default: true  # noqa: E501

        :return: The tokens_transferable_by_user of this ServicesContractDeployDto.  # noqa: E501
        :rtype: bool
        """
        return self._tokens_transferable_by_user

    @tokens_transferable_by_user.setter
    def tokens_transferable_by_user(self, tokens_transferable_by_user):
        """Sets the tokens_transferable_by_user of this ServicesContractDeployDto.

        default: true  # noqa: E501

        :param tokens_transferable_by_user: The tokens_transferable_by_user of this ServicesContractDeployDto.  # noqa: E501
        :type tokens_transferable_by_user: bool
        """

        self._tokens_transferable_by_user = tokens_transferable_by_user

    @property
    def transfer_cooldown_time(self):
        """Gets the transfer_cooldown_time of this ServicesContractDeployDto.  # noqa: E501

        default: 0  # noqa: E501

        :return: The transfer_cooldown_time of this ServicesContractDeployDto.  # noqa: E501
        :rtype: int
        """
        return self._transfer_cooldown_time

    @transfer_cooldown_time.setter
    def transfer_cooldown_time(self, transfer_cooldown_time):
        """Sets the transfer_cooldown_time of this ServicesContractDeployDto.

        default: 0  # noqa: E501

        :param transfer_cooldown_time: The transfer_cooldown_time of this ServicesContractDeployDto.  # noqa: E501
        :type transfer_cooldown_time: int
        """

        self._transfer_cooldown_time = transfer_cooldown_time

    @property
    def type(self):
        """Gets the type of this ServicesContractDeployDto.  # noqa: E501


        :return: The type of this ServicesContractDeployDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServicesContractDeployDto.


        :param type: The type of this ServicesContractDeployDto.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["erc721", "erc1155"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesContractDeployDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicesContractDeployDto):
            return True

        return self.to_dict() != other.to_dict()
