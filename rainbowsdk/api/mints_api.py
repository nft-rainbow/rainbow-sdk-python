# coding: utf-8

"""
    Rainbow-API

    The responses of the open api in swagger focus on the data field rather than the code and the message fields  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rainbowsdk.api_client import ApiClient
from rainbowsdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MintsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_custom_mint(self, authorization, custom_mint_batch_dto, **kwargs):  # noqa: E501
        """Batch Mint NFTs  # noqa: E501

        Mint several NFTs once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_custom_mint(authorization, custom_mint_batch_dto, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param custom_mint_batch_dto: custom_mint_batch_dto (required)
        :type custom_mint_batch_dto: ServicesCustomMintBatchDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[ModelsMintTask]
        """
        kwargs['_return_http_data_only'] = True
        return self.batch_custom_mint_with_http_info(authorization, custom_mint_batch_dto, **kwargs)  # noqa: E501

    def batch_custom_mint_with_http_info(self, authorization, custom_mint_batch_dto, **kwargs):  # noqa: E501
        """Batch Mint NFTs  # noqa: E501

        Mint several NFTs once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.batch_custom_mint_with_http_info(authorization, custom_mint_batch_dto, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param custom_mint_batch_dto: custom_mint_batch_dto (required)
        :type custom_mint_batch_dto: ServicesCustomMintBatchDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[ModelsMintTask], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'authorization',
            'custom_mint_batch_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_custom_mint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and local_var_params.get('authorization') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `batch_custom_mint`")  # noqa: E501
        # verify the required parameter 'custom_mint_batch_dto' is set
        if self.api_client.client_side_validation and local_var_params.get('custom_mint_batch_dto') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `custom_mint_batch_dto` when calling `batch_custom_mint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_mint_batch_dto' in local_var_params:
            body_params = local_var_params['custom_mint_batch_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "list[ModelsMintTask]",
            400: "RainbowErrorsRainbowErrorDetailInfo",
            500: "RainbowErrorsRainbowErrorDetailInfo",
        }

        return self.api_client.call_api(
            '/mints/customizable/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def custom_mint(self, authorization, custom_mint_dto, **kwargs):  # noqa: E501
        """Mint NFT  # noqa: E501

        Mint a NFT by providing a metadata url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.custom_mint(authorization, custom_mint_dto, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param custom_mint_dto: custom_mint_dto (required)
        :type custom_mint_dto: ServicesCustomMintDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelsMintTask
        """
        kwargs['_return_http_data_only'] = True
        return self.custom_mint_with_http_info(authorization, custom_mint_dto, **kwargs)  # noqa: E501

    def custom_mint_with_http_info(self, authorization, custom_mint_dto, **kwargs):  # noqa: E501
        """Mint NFT  # noqa: E501

        Mint a NFT by providing a metadata url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.custom_mint_with_http_info(authorization, custom_mint_dto, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param custom_mint_dto: custom_mint_dto (required)
        :type custom_mint_dto: ServicesCustomMintDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelsMintTask, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'authorization',
            'custom_mint_dto'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_mint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and local_var_params.get('authorization') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `custom_mint`")  # noqa: E501
        # verify the required parameter 'custom_mint_dto' is set
        if self.api_client.client_side_validation and local_var_params.get('custom_mint_dto') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `custom_mint_dto` when calling `custom_mint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_mint_dto' in local_var_params:
            body_params = local_var_params['custom_mint_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ModelsMintTask",
            400: "RainbowErrorsRainbowErrorDetailInfo",
            500: "RainbowErrorsRainbowErrorDetailInfo",
        }

        return self.api_client.call_api(
            '/mints/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def easy_mint_by_file(self, authorization, chain, description, mint_to_address, name, file, **kwargs):  # noqa: E501
        """Mint NFT with file  # noqa: E501

        Mint a NFT by uploading a file which can be a video, image and so on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.easy_mint_by_file(authorization, chain, description, mint_to_address, name, file, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param chain: (required)
        :type chain: str
        :param description: (required)
        :type description: str
        :param mint_to_address: (required)
        :type mint_to_address: str
        :param name: (required)
        :type name: str
        :param file: file (required)
        :type file: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelsMintTask
        """
        kwargs['_return_http_data_only'] = True
        return self.easy_mint_by_file_with_http_info(authorization, chain, description, mint_to_address, name, file, **kwargs)  # noqa: E501

    def easy_mint_by_file_with_http_info(self, authorization, chain, description, mint_to_address, name, file, **kwargs):  # noqa: E501
        """Mint NFT with file  # noqa: E501

        Mint a NFT by uploading a file which can be a video, image and so on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.easy_mint_by_file_with_http_info(authorization, chain, description, mint_to_address, name, file, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param chain: (required)
        :type chain: str
        :param description: (required)
        :type description: str
        :param mint_to_address: (required)
        :type mint_to_address: str
        :param name: (required)
        :type name: str
        :param file: file (required)
        :type file: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelsMintTask, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'authorization',
            'chain',
            'description',
            'mint_to_address',
            'name',
            'file'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_mint_by_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and local_var_params.get('authorization') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `easy_mint_by_file`")  # noqa: E501
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and local_var_params.get('chain') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `chain` when calling `easy_mint_by_file`")  # noqa: E501
        # verify the required parameter 'description' is set
        if self.api_client.client_side_validation and local_var_params.get('description') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `description` when calling `easy_mint_by_file`")  # noqa: E501
        # verify the required parameter 'mint_to_address' is set
        if self.api_client.client_side_validation and local_var_params.get('mint_to_address') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `mint_to_address` when calling `easy_mint_by_file`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and local_var_params.get('name') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `easy_mint_by_file`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and local_var_params.get('file') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `file` when calling `easy_mint_by_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'chain' in local_var_params:
            form_params.append(('chain', local_var_params['chain']))  # noqa: E501
        if 'description' in local_var_params:
            form_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'mint_to_address' in local_var_params:
            form_params.append(('mint_to_address', local_var_params['mint_to_address']))  # noqa: E501
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ModelsMintTask",
            400: "RainbowErrorsRainbowErrorDetailInfo",
            500: "RainbowErrorsRainbowErrorDetailInfo",
        }

        return self.api_client.call_api(
            '/mints/easy/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def easy_mint_by_metadata(self, authorization, easy_mint_meta_info, **kwargs):  # noqa: E501
        """Mint NFT with metadata  # noqa: E501

        Mint a NFT by providing a file url to create the metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.easy_mint_by_metadata(authorization, easy_mint_meta_info, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param easy_mint_meta_info: easy_mint_meta_info (required)
        :type easy_mint_meta_info: ServicesEasyMintMetaDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelsMintTask
        """
        kwargs['_return_http_data_only'] = True
        return self.easy_mint_by_metadata_with_http_info(authorization, easy_mint_meta_info, **kwargs)  # noqa: E501

    def easy_mint_by_metadata_with_http_info(self, authorization, easy_mint_meta_info, **kwargs):  # noqa: E501
        """Mint NFT with metadata  # noqa: E501

        Mint a NFT by providing a file url to create the metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.easy_mint_by_metadata_with_http_info(authorization, easy_mint_meta_info, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param easy_mint_meta_info: easy_mint_meta_info (required)
        :type easy_mint_meta_info: ServicesEasyMintMetaDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelsMintTask, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'authorization',
            'easy_mint_meta_info'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method easy_mint_by_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and local_var_params.get('authorization') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `easy_mint_by_metadata`")  # noqa: E501
        # verify the required parameter 'easy_mint_meta_info' is set
        if self.api_client.client_side_validation and local_var_params.get('easy_mint_meta_info') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `easy_mint_meta_info` when calling `easy_mint_by_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'easy_mint_meta_info' in local_var_params:
            body_params = local_var_params['easy_mint_meta_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ModelsMintTask",
            400: "RainbowErrorsRainbowErrorDetailInfo",
            500: "RainbowErrorsRainbowErrorDetailInfo",
        }

        return self.api_client.call_api(
            '/mints/easy/urls', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_mint_detail(self, authorization, id, **kwargs):  # noqa: E501
        """Mint NFT detail  # noqa: E501

        Get NFT detail info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mint_detail(authorization, id, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param id: id (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelsMintTask
        """
        kwargs['_return_http_data_only'] = True
        return self.get_mint_detail_with_http_info(authorization, id, **kwargs)  # noqa: E501

    def get_mint_detail_with_http_info(self, authorization, id, **kwargs):  # noqa: E501
        """Mint NFT detail  # noqa: E501

        Get NFT detail info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mint_detail_with_http_info(authorization, id, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param id: id (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelsMintTask, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'authorization',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mint_detail" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and local_var_params.get('authorization') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_mint_detail`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and local_var_params.get('id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_mint_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ModelsMintTask",
            400: "RainbowErrorsRainbowErrorDetailInfo",
            500: "RainbowErrorsRainbowErrorDetailInfo",
        }

        return self.api_client.call_api(
            '/mints/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_mints(self, authorization, **kwargs):  # noqa: E501
        """Obtain NFT list  # noqa: E501

        Get the NFT list containing the NFTs minted in the specified app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_mints(authorization, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param page: page
        :type page: int
        :param limit: limit
        :type limit: int
        :param contract: contract
        :type contract: str
        :param mint_to: mint_to
        :type mint_to: str
        :param status: status
        :type status: int
        :param chain: chain
        :type chain: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelsMintTaskQueryResult
        """
        kwargs['_return_http_data_only'] = True
        return self.list_mints_with_http_info(authorization, **kwargs)  # noqa: E501

    def list_mints_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Obtain NFT list  # noqa: E501

        Get the NFT list containing the NFTs minted in the specified app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_mints_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param authorization: Bearer Open_JWT (required)
        :type authorization: str
        :param page: page
        :type page: int
        :param limit: limit
        :type limit: int
        :param contract: contract
        :type contract: str
        :param mint_to: mint_to
        :type mint_to: str
        :param status: status
        :type status: int
        :param chain: chain
        :type chain: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelsMintTaskQueryResult, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'authorization',
            'page',
            'limit',
            'contract',
            'mint_to',
            'status',
            'chain'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and local_var_params.get('authorization') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `list_mints`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('page') is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if local_var_params.get('limit') is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if local_var_params.get('contract') is not None:  # noqa: E501
            query_params.append(('contract', local_var_params['contract']))  # noqa: E501
        if local_var_params.get('mint_to') is not None:  # noqa: E501
            query_params.append(('mint_to', local_var_params['mint_to']))  # noqa: E501
        if local_var_params.get('status') is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if local_var_params.get('chain') is not None:  # noqa: E501
            query_params.append(('chain', local_var_params['chain']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ModelsMintTaskQueryResult",
            500: "RainbowErrorsRainbowErrorDetailInfo",
        }

        return self.api_client.call_api(
            '/mints/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
