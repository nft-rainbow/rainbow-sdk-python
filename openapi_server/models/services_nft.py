# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServicesNFT(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_address: str=None, owner: str=None, token_id: str=None):
        """ServicesNFT - a model defined in OpenAPI

        :param contract_address: The contract_address of this ServicesNFT.
        :param owner: The owner of this ServicesNFT.
        :param token_id: The token_id of this ServicesNFT.
        """
        self.openapi_types = {
            'contract_address': str,
            'owner': str,
            'token_id': str
        }

        self.attribute_map = {
            'contract_address': 'contract_address',
            'owner': 'owner',
            'token_id': 'token_id'
        }

        self._contract_address = contract_address
        self._owner = owner
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesNFT':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.NFT of this ServicesNFT.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_address(self):
        """Gets the contract_address of this ServicesNFT.


        :return: The contract_address of this ServicesNFT.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this ServicesNFT.


        :param contract_address: The contract_address of this ServicesNFT.
        :type contract_address: str
        """

        self._contract_address = contract_address

    @property
    def owner(self):
        """Gets the owner of this ServicesNFT.


        :return: The owner of this ServicesNFT.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ServicesNFT.


        :param owner: The owner of this ServicesNFT.
        :type owner: str
        """

        self._owner = owner

    @property
    def token_id(self):
        """Gets the token_id of this ServicesNFT.


        :return: The token_id of this ServicesNFT.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ServicesNFT.


        :param token_id: The token_id of this ServicesNFT.
        :type token_id: str
        """

        self._token_id = token_id
