# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServicesContractDeployDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_sponsor: bool=None, base_uri: str=None, chain: str=None, is_sponsor_for_all_user: bool=None, name: str=None, owner_address: str=None, royalties_address: str=None, royalties_bps: int=None, symbol: str=None, tokens_burnable: bool=None, tokens_transferable_by_admin: bool=None, tokens_transferable_by_user: bool=None, transfer_cooldown_time: int=None, type: str=None):
        """ServicesContractDeployDto - a model defined in OpenAPI

        :param auto_sponsor: The auto_sponsor of this ServicesContractDeployDto.
        :param base_uri: The base_uri of this ServicesContractDeployDto.
        :param chain: The chain of this ServicesContractDeployDto.
        :param is_sponsor_for_all_user: The is_sponsor_for_all_user of this ServicesContractDeployDto.
        :param name: The name of this ServicesContractDeployDto.
        :param owner_address: The owner_address of this ServicesContractDeployDto.
        :param royalties_address: The royalties_address of this ServicesContractDeployDto.
        :param royalties_bps: The royalties_bps of this ServicesContractDeployDto.
        :param symbol: The symbol of this ServicesContractDeployDto.
        :param tokens_burnable: The tokens_burnable of this ServicesContractDeployDto.
        :param tokens_transferable_by_admin: The tokens_transferable_by_admin of this ServicesContractDeployDto.
        :param tokens_transferable_by_user: The tokens_transferable_by_user of this ServicesContractDeployDto.
        :param transfer_cooldown_time: The transfer_cooldown_time of this ServicesContractDeployDto.
        :param type: The type of this ServicesContractDeployDto.
        """
        self.openapi_types = {
            'auto_sponsor': bool,
            'base_uri': str,
            'chain': str,
            'is_sponsor_for_all_user': bool,
            'name': str,
            'owner_address': str,
            'royalties_address': str,
            'royalties_bps': int,
            'symbol': str,
            'tokens_burnable': bool,
            'tokens_transferable_by_admin': bool,
            'tokens_transferable_by_user': bool,
            'transfer_cooldown_time': int,
            'type': str
        }

        self.attribute_map = {
            'auto_sponsor': 'auto_sponsor',
            'base_uri': 'base_uri',
            'chain': 'chain',
            'is_sponsor_for_all_user': 'is_sponsor_for_all_user',
            'name': 'name',
            'owner_address': 'owner_address',
            'royalties_address': 'royalties_address',
            'royalties_bps': 'royalties_bps',
            'symbol': 'symbol',
            'tokens_burnable': 'tokens_burnable',
            'tokens_transferable_by_admin': 'tokens_transferable_by_admin',
            'tokens_transferable_by_user': 'tokens_transferable_by_user',
            'transfer_cooldown_time': 'transfer_cooldown_time',
            'type': 'type'
        }

        self._auto_sponsor = auto_sponsor
        self._base_uri = base_uri
        self._chain = chain
        self._is_sponsor_for_all_user = is_sponsor_for_all_user
        self._name = name
        self._owner_address = owner_address
        self._royalties_address = royalties_address
        self._royalties_bps = royalties_bps
        self._symbol = symbol
        self._tokens_burnable = tokens_burnable
        self._tokens_transferable_by_admin = tokens_transferable_by_admin
        self._tokens_transferable_by_user = tokens_transferable_by_user
        self._transfer_cooldown_time = transfer_cooldown_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesContractDeployDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.ContractDeployDto of this ServicesContractDeployDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_sponsor(self):
        """Gets the auto_sponsor of this ServicesContractDeployDto.

        default: true

        :return: The auto_sponsor of this ServicesContractDeployDto.
        :rtype: bool
        """
        return self._auto_sponsor

    @auto_sponsor.setter
    def auto_sponsor(self, auto_sponsor):
        """Sets the auto_sponsor of this ServicesContractDeployDto.

        default: true

        :param auto_sponsor: The auto_sponsor of this ServicesContractDeployDto.
        :type auto_sponsor: bool
        """

        self._auto_sponsor = auto_sponsor

    @property
    def base_uri(self):
        """Gets the base_uri of this ServicesContractDeployDto.


        :return: The base_uri of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this ServicesContractDeployDto.


        :param base_uri: The base_uri of this ServicesContractDeployDto.
        :type base_uri: str
        """

        self._base_uri = base_uri

    @property
    def chain(self):
        """Gets the chain of this ServicesContractDeployDto.


        :return: The chain of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ServicesContractDeployDto.


        :param chain: The chain of this ServicesContractDeployDto.
        :type chain: str
        """
        allowed_values = ["conflux", "conflux_test"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def is_sponsor_for_all_user(self):
        """Gets the is_sponsor_for_all_user of this ServicesContractDeployDto.

        default: true

        :return: The is_sponsor_for_all_user of this ServicesContractDeployDto.
        :rtype: bool
        """
        return self._is_sponsor_for_all_user

    @is_sponsor_for_all_user.setter
    def is_sponsor_for_all_user(self, is_sponsor_for_all_user):
        """Sets the is_sponsor_for_all_user of this ServicesContractDeployDto.

        default: true

        :param is_sponsor_for_all_user: The is_sponsor_for_all_user of this ServicesContractDeployDto.
        :type is_sponsor_for_all_user: bool
        """

        self._is_sponsor_for_all_user = is_sponsor_for_all_user

    @property
    def name(self):
        """Gets the name of this ServicesContractDeployDto.


        :return: The name of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesContractDeployDto.


        :param name: The name of this ServicesContractDeployDto.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_address(self):
        """Gets the owner_address of this ServicesContractDeployDto.


        :return: The owner_address of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """Sets the owner_address of this ServicesContractDeployDto.


        :param owner_address: The owner_address of this ServicesContractDeployDto.
        :type owner_address: str
        """

        self._owner_address = owner_address

    @property
    def royalties_address(self):
        """Gets the royalties_address of this ServicesContractDeployDto.


        :return: The royalties_address of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._royalties_address

    @royalties_address.setter
    def royalties_address(self, royalties_address):
        """Sets the royalties_address of this ServicesContractDeployDto.


        :param royalties_address: The royalties_address of this ServicesContractDeployDto.
        :type royalties_address: str
        """

        self._royalties_address = royalties_address

    @property
    def royalties_bps(self):
        """Gets the royalties_bps of this ServicesContractDeployDto.


        :return: The royalties_bps of this ServicesContractDeployDto.
        :rtype: int
        """
        return self._royalties_bps

    @royalties_bps.setter
    def royalties_bps(self, royalties_bps):
        """Sets the royalties_bps of this ServicesContractDeployDto.


        :param royalties_bps: The royalties_bps of this ServicesContractDeployDto.
        :type royalties_bps: int
        """

        self._royalties_bps = royalties_bps

    @property
    def symbol(self):
        """Gets the symbol of this ServicesContractDeployDto.


        :return: The symbol of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ServicesContractDeployDto.


        :param symbol: The symbol of this ServicesContractDeployDto.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")

        self._symbol = symbol

    @property
    def tokens_burnable(self):
        """Gets the tokens_burnable of this ServicesContractDeployDto.

        default: true

        :return: The tokens_burnable of this ServicesContractDeployDto.
        :rtype: bool
        """
        return self._tokens_burnable

    @tokens_burnable.setter
    def tokens_burnable(self, tokens_burnable):
        """Sets the tokens_burnable of this ServicesContractDeployDto.

        default: true

        :param tokens_burnable: The tokens_burnable of this ServicesContractDeployDto.
        :type tokens_burnable: bool
        """

        self._tokens_burnable = tokens_burnable

    @property
    def tokens_transferable_by_admin(self):
        """Gets the tokens_transferable_by_admin of this ServicesContractDeployDto.

        default: true

        :return: The tokens_transferable_by_admin of this ServicesContractDeployDto.
        :rtype: bool
        """
        return self._tokens_transferable_by_admin

    @tokens_transferable_by_admin.setter
    def tokens_transferable_by_admin(self, tokens_transferable_by_admin):
        """Sets the tokens_transferable_by_admin of this ServicesContractDeployDto.

        default: true

        :param tokens_transferable_by_admin: The tokens_transferable_by_admin of this ServicesContractDeployDto.
        :type tokens_transferable_by_admin: bool
        """

        self._tokens_transferable_by_admin = tokens_transferable_by_admin

    @property
    def tokens_transferable_by_user(self):
        """Gets the tokens_transferable_by_user of this ServicesContractDeployDto.

        default: true

        :return: The tokens_transferable_by_user of this ServicesContractDeployDto.
        :rtype: bool
        """
        return self._tokens_transferable_by_user

    @tokens_transferable_by_user.setter
    def tokens_transferable_by_user(self, tokens_transferable_by_user):
        """Sets the tokens_transferable_by_user of this ServicesContractDeployDto.

        default: true

        :param tokens_transferable_by_user: The tokens_transferable_by_user of this ServicesContractDeployDto.
        :type tokens_transferable_by_user: bool
        """

        self._tokens_transferable_by_user = tokens_transferable_by_user

    @property
    def transfer_cooldown_time(self):
        """Gets the transfer_cooldown_time of this ServicesContractDeployDto.

        default: 0

        :return: The transfer_cooldown_time of this ServicesContractDeployDto.
        :rtype: int
        """
        return self._transfer_cooldown_time

    @transfer_cooldown_time.setter
    def transfer_cooldown_time(self, transfer_cooldown_time):
        """Sets the transfer_cooldown_time of this ServicesContractDeployDto.

        default: 0

        :param transfer_cooldown_time: The transfer_cooldown_time of this ServicesContractDeployDto.
        :type transfer_cooldown_time: int
        """

        self._transfer_cooldown_time = transfer_cooldown_time

    @property
    def type(self):
        """Gets the type of this ServicesContractDeployDto.


        :return: The type of this ServicesContractDeployDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServicesContractDeployDto.


        :param type: The type of this ServicesContractDeployDto.
        :type type: str
        """
        allowed_values = ["erc721", "erc1155"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
