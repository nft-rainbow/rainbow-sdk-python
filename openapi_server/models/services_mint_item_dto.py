# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServicesMintItemDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, metadata_uri: str=None, mint_to_address: str=None, token_id: str=None):
        """ServicesMintItemDto - a model defined in OpenAPI

        :param amount: The amount of this ServicesMintItemDto.
        :param metadata_uri: The metadata_uri of this ServicesMintItemDto.
        :param mint_to_address: The mint_to_address of this ServicesMintItemDto.
        :param token_id: The token_id of this ServicesMintItemDto.
        """
        self.openapi_types = {
            'amount': int,
            'metadata_uri': str,
            'mint_to_address': str,
            'token_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'metadata_uri': 'metadata_uri',
            'mint_to_address': 'mint_to_address',
            'token_id': 'token_id'
        }

        self._amount = amount
        self._metadata_uri = metadata_uri
        self._mint_to_address = mint_to_address
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesMintItemDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.MintItemDto of this ServicesMintItemDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ServicesMintItemDto.


        :return: The amount of this ServicesMintItemDto.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ServicesMintItemDto.


        :param amount: The amount of this ServicesMintItemDto.
        :type amount: int
        """

        self._amount = amount

    @property
    def metadata_uri(self):
        """Gets the metadata_uri of this ServicesMintItemDto.


        :return: The metadata_uri of this ServicesMintItemDto.
        :rtype: str
        """
        return self._metadata_uri

    @metadata_uri.setter
    def metadata_uri(self, metadata_uri):
        """Sets the metadata_uri of this ServicesMintItemDto.


        :param metadata_uri: The metadata_uri of this ServicesMintItemDto.
        :type metadata_uri: str
        """

        self._metadata_uri = metadata_uri

    @property
    def mint_to_address(self):
        """Gets the mint_to_address of this ServicesMintItemDto.


        :return: The mint_to_address of this ServicesMintItemDto.
        :rtype: str
        """
        return self._mint_to_address

    @mint_to_address.setter
    def mint_to_address(self, mint_to_address):
        """Sets the mint_to_address of this ServicesMintItemDto.


        :param mint_to_address: The mint_to_address of this ServicesMintItemDto.
        :type mint_to_address: str
        """
        if mint_to_address is None:
            raise ValueError("Invalid value for `mint_to_address`, must not be `None`")

        self._mint_to_address = mint_to_address

    @property
    def token_id(self):
        """Gets the token_id of this ServicesMintItemDto.


        :return: The token_id of this ServicesMintItemDto.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ServicesMintItemDto.


        :param token_id: The token_id of this ServicesMintItemDto.
        :type token_id: str
        """

        self._token_id = token_id
