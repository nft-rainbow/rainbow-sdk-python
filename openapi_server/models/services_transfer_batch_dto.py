# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.services_transfer_item_dto import ServicesTransferItemDto
from openapi_server import util


class ServicesTransferBatchDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chain: str=None, contract_address: str=None, contract_type: str=None, items: List[ServicesTransferItemDto]=None):
        """ServicesTransferBatchDto - a model defined in OpenAPI

        :param chain: The chain of this ServicesTransferBatchDto.
        :param contract_address: The contract_address of this ServicesTransferBatchDto.
        :param contract_type: The contract_type of this ServicesTransferBatchDto.
        :param items: The items of this ServicesTransferBatchDto.
        """
        self.openapi_types = {
            'chain': str,
            'contract_address': str,
            'contract_type': str,
            'items': List[ServicesTransferItemDto]
        }

        self.attribute_map = {
            'chain': 'chain',
            'contract_address': 'contract_address',
            'contract_type': 'contract_type',
            'items': 'items'
        }

        self._chain = chain
        self._contract_address = contract_address
        self._contract_type = contract_type
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesTransferBatchDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.TransferBatchDto of this ServicesTransferBatchDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chain(self):
        """Gets the chain of this ServicesTransferBatchDto.


        :return: The chain of this ServicesTransferBatchDto.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ServicesTransferBatchDto.


        :param chain: The chain of this ServicesTransferBatchDto.
        :type chain: str
        """
        allowed_values = ["conflux", "conflux_test"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def contract_address(self):
        """Gets the contract_address of this ServicesTransferBatchDto.


        :return: The contract_address of this ServicesTransferBatchDto.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this ServicesTransferBatchDto.


        :param contract_address: The contract_address of this ServicesTransferBatchDto.
        :type contract_address: str
        """
        if contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")

        self._contract_address = contract_address

    @property
    def contract_type(self):
        """Gets the contract_type of this ServicesTransferBatchDto.


        :return: The contract_type of this ServicesTransferBatchDto.
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this ServicesTransferBatchDto.


        :param contract_type: The contract_type of this ServicesTransferBatchDto.
        :type contract_type: str
        """
        allowed_values = ["erc721", "erc1155"]  # noqa: E501
        if contract_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contract_type` ({0}), must be one of {1}"
                .format(contract_type, allowed_values)
            )

        self._contract_type = contract_type

    @property
    def items(self):
        """Gets the items of this ServicesTransferBatchDto.


        :return: The items of this ServicesTransferBatchDto.
        :rtype: List[ServicesTransferItemDto]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ServicesTransferBatchDto.


        :param items: The items of this ServicesTransferBatchDto.
        :type items: List[ServicesTransferItemDto]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items
