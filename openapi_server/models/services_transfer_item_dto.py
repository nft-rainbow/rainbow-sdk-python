# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServicesTransferItemDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, token_id: str=None, transfer_from_address: str=None, transfer_to_address: str=None):
        """ServicesTransferItemDto - a model defined in OpenAPI

        :param amount: The amount of this ServicesTransferItemDto.
        :param token_id: The token_id of this ServicesTransferItemDto.
        :param transfer_from_address: The transfer_from_address of this ServicesTransferItemDto.
        :param transfer_to_address: The transfer_to_address of this ServicesTransferItemDto.
        """
        self.openapi_types = {
            'amount': int,
            'token_id': str,
            'transfer_from_address': str,
            'transfer_to_address': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'token_id': 'token_id',
            'transfer_from_address': 'transfer_from_address',
            'transfer_to_address': 'transfer_to_address'
        }

        self._amount = amount
        self._token_id = token_id
        self._transfer_from_address = transfer_from_address
        self._transfer_to_address = transfer_to_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesTransferItemDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.TransferItemDto of this ServicesTransferItemDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ServicesTransferItemDto.


        :return: The amount of this ServicesTransferItemDto.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ServicesTransferItemDto.


        :param amount: The amount of this ServicesTransferItemDto.
        :type amount: int
        """

        self._amount = amount

    @property
    def token_id(self):
        """Gets the token_id of this ServicesTransferItemDto.


        :return: The token_id of this ServicesTransferItemDto.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ServicesTransferItemDto.


        :param token_id: The token_id of this ServicesTransferItemDto.
        :type token_id: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")

        self._token_id = token_id

    @property
    def transfer_from_address(self):
        """Gets the transfer_from_address of this ServicesTransferItemDto.


        :return: The transfer_from_address of this ServicesTransferItemDto.
        :rtype: str
        """
        return self._transfer_from_address

    @transfer_from_address.setter
    def transfer_from_address(self, transfer_from_address):
        """Sets the transfer_from_address of this ServicesTransferItemDto.


        :param transfer_from_address: The transfer_from_address of this ServicesTransferItemDto.
        :type transfer_from_address: str
        """
        if transfer_from_address is None:
            raise ValueError("Invalid value for `transfer_from_address`, must not be `None`")

        self._transfer_from_address = transfer_from_address

    @property
    def transfer_to_address(self):
        """Gets the transfer_to_address of this ServicesTransferItemDto.


        :return: The transfer_to_address of this ServicesTransferItemDto.
        :rtype: str
        """
        return self._transfer_to_address

    @transfer_to_address.setter
    def transfer_to_address(self, transfer_to_address):
        """Sets the transfer_to_address of this ServicesTransferItemDto.


        :param transfer_to_address: The transfer_to_address of this ServicesTransferItemDto.
        :type transfer_to_address: str
        """
        if transfer_to_address is None:
            raise ValueError("Invalid value for `transfer_to_address`, must not be `None`")

        self._transfer_to_address = transfer_to_address
