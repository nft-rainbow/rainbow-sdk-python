# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MultipartFileHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename: str=None, header: Dict[str, List[str]]=None, size: int=None):
        """MultipartFileHeader - a model defined in OpenAPI

        :param filename: The filename of this MultipartFileHeader.
        :param header: The header of this MultipartFileHeader.
        :param size: The size of this MultipartFileHeader.
        """
        self.openapi_types = {
            'filename': str,
            'header': Dict[str, List[str]],
            'size': int
        }

        self.attribute_map = {
            'filename': 'filename',
            'header': 'header',
            'size': 'size'
        }

        self._filename = filename
        self._header = header
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultipartFileHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The multipart.FileHeader of this MultipartFileHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self):
        """Gets the filename of this MultipartFileHeader.


        :return: The filename of this MultipartFileHeader.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this MultipartFileHeader.


        :param filename: The filename of this MultipartFileHeader.
        :type filename: str
        """

        self._filename = filename

    @property
    def header(self):
        """Gets the header of this MultipartFileHeader.


        :return: The header of this MultipartFileHeader.
        :rtype: Dict[str, List[str]]
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this MultipartFileHeader.


        :param header: The header of this MultipartFileHeader.
        :type header: Dict[str, List[str]]
        """

        self._header = header

    @property
    def size(self):
        """Gets the size of this MultipartFileHeader.


        :return: The size of this MultipartFileHeader.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MultipartFileHeader.


        :param size: The size of this MultipartFileHeader.
        :type size: int
        """

        self._size = size
