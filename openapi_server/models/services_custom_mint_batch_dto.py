# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.services_mint_item_dto import ServicesMintItemDto
from openapi_server import util


class ServicesCustomMintBatchDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chain: str=None, contract_address: str=None, mint_items: List[ServicesMintItemDto]=None):
        """ServicesCustomMintBatchDto - a model defined in OpenAPI

        :param chain: The chain of this ServicesCustomMintBatchDto.
        :param contract_address: The contract_address of this ServicesCustomMintBatchDto.
        :param mint_items: The mint_items of this ServicesCustomMintBatchDto.
        """
        self.openapi_types = {
            'chain': str,
            'contract_address': str,
            'mint_items': List[ServicesMintItemDto]
        }

        self.attribute_map = {
            'chain': 'chain',
            'contract_address': 'contract_address',
            'mint_items': 'mint_items'
        }

        self._chain = chain
        self._contract_address = contract_address
        self._mint_items = mint_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesCustomMintBatchDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.CustomMintBatchDto of this ServicesCustomMintBatchDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chain(self):
        """Gets the chain of this ServicesCustomMintBatchDto.


        :return: The chain of this ServicesCustomMintBatchDto.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ServicesCustomMintBatchDto.


        :param chain: The chain of this ServicesCustomMintBatchDto.
        :type chain: str
        """
        allowed_values = ["conflux", "conflux_test"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def contract_address(self):
        """Gets the contract_address of this ServicesCustomMintBatchDto.


        :return: The contract_address of this ServicesCustomMintBatchDto.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this ServicesCustomMintBatchDto.


        :param contract_address: The contract_address of this ServicesCustomMintBatchDto.
        :type contract_address: str
        """
        if contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")

        self._contract_address = contract_address

    @property
    def mint_items(self):
        """Gets the mint_items of this ServicesCustomMintBatchDto.


        :return: The mint_items of this ServicesCustomMintBatchDto.
        :rtype: List[ServicesMintItemDto]
        """
        return self._mint_items

    @mint_items.setter
    def mint_items(self, mint_items):
        """Sets the mint_items of this ServicesCustomMintBatchDto.


        :param mint_items: The mint_items of this ServicesCustomMintBatchDto.
        :type mint_items: List[ServicesMintItemDto]
        """
        if mint_items is None:
            raise ValueError("Invalid value for `mint_items`, must not be `None`")

        self._mint_items = mint_items
