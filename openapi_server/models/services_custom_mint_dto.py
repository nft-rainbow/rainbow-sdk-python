# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServicesCustomMintDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, chain: str=None, contract_address: str=None, metadata_uri: str=None, mint_to_address: str=None, token_id: str=None):
        """ServicesCustomMintDto - a model defined in OpenAPI

        :param amount: The amount of this ServicesCustomMintDto.
        :param chain: The chain of this ServicesCustomMintDto.
        :param contract_address: The contract_address of this ServicesCustomMintDto.
        :param metadata_uri: The metadata_uri of this ServicesCustomMintDto.
        :param mint_to_address: The mint_to_address of this ServicesCustomMintDto.
        :param token_id: The token_id of this ServicesCustomMintDto.
        """
        self.openapi_types = {
            'amount': int,
            'chain': str,
            'contract_address': str,
            'metadata_uri': str,
            'mint_to_address': str,
            'token_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'chain': 'chain',
            'contract_address': 'contract_address',
            'metadata_uri': 'metadata_uri',
            'mint_to_address': 'mint_to_address',
            'token_id': 'token_id'
        }

        self._amount = amount
        self._chain = chain
        self._contract_address = contract_address
        self._metadata_uri = metadata_uri
        self._mint_to_address = mint_to_address
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesCustomMintDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.CustomMintDto of this ServicesCustomMintDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ServicesCustomMintDto.


        :return: The amount of this ServicesCustomMintDto.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ServicesCustomMintDto.


        :param amount: The amount of this ServicesCustomMintDto.
        :type amount: int
        """

        self._amount = amount

    @property
    def chain(self):
        """Gets the chain of this ServicesCustomMintDto.


        :return: The chain of this ServicesCustomMintDto.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ServicesCustomMintDto.


        :param chain: The chain of this ServicesCustomMintDto.
        :type chain: str
        """
        allowed_values = ["conflux", "conflux_test"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def contract_address(self):
        """Gets the contract_address of this ServicesCustomMintDto.


        :return: The contract_address of this ServicesCustomMintDto.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this ServicesCustomMintDto.


        :param contract_address: The contract_address of this ServicesCustomMintDto.
        :type contract_address: str
        """
        if contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")

        self._contract_address = contract_address

    @property
    def metadata_uri(self):
        """Gets the metadata_uri of this ServicesCustomMintDto.


        :return: The metadata_uri of this ServicesCustomMintDto.
        :rtype: str
        """
        return self._metadata_uri

    @metadata_uri.setter
    def metadata_uri(self, metadata_uri):
        """Sets the metadata_uri of this ServicesCustomMintDto.


        :param metadata_uri: The metadata_uri of this ServicesCustomMintDto.
        :type metadata_uri: str
        """

        self._metadata_uri = metadata_uri

    @property
    def mint_to_address(self):
        """Gets the mint_to_address of this ServicesCustomMintDto.


        :return: The mint_to_address of this ServicesCustomMintDto.
        :rtype: str
        """
        return self._mint_to_address

    @mint_to_address.setter
    def mint_to_address(self, mint_to_address):
        """Sets the mint_to_address of this ServicesCustomMintDto.


        :param mint_to_address: The mint_to_address of this ServicesCustomMintDto.
        :type mint_to_address: str
        """
        if mint_to_address is None:
            raise ValueError("Invalid value for `mint_to_address`, must not be `None`")

        self._mint_to_address = mint_to_address

    @property
    def token_id(self):
        """Gets the token_id of this ServicesCustomMintDto.


        :return: The token_id of this ServicesCustomMintDto.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ServicesCustomMintDto.


        :param token_id: The token_id of this ServicesCustomMintDto.
        :type token_id: str
        """

        self._token_id = token_id
