# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.models_exposed_metadata_attribute import ModelsExposedMetadataAttribute
from openapi_server import util


class ServicesMetadataDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, animation_url: str=None, attributes: List[ModelsExposedMetadataAttribute]=None, description: str=None, external_link: str=None, image: str=None, name: str=None):
        """ServicesMetadataDto - a model defined in OpenAPI

        :param animation_url: The animation_url of this ServicesMetadataDto.
        :param attributes: The attributes of this ServicesMetadataDto.
        :param description: The description of this ServicesMetadataDto.
        :param external_link: The external_link of this ServicesMetadataDto.
        :param image: The image of this ServicesMetadataDto.
        :param name: The name of this ServicesMetadataDto.
        """
        self.openapi_types = {
            'animation_url': str,
            'attributes': List[ModelsExposedMetadataAttribute],
            'description': str,
            'external_link': str,
            'image': str,
            'name': str
        }

        self.attribute_map = {
            'animation_url': 'animation_url',
            'attributes': 'attributes',
            'description': 'description',
            'external_link': 'external_link',
            'image': 'image',
            'name': 'name'
        }

        self._animation_url = animation_url
        self._attributes = attributes
        self._description = description
        self._external_link = external_link
        self._image = image
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesMetadataDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The services.MetadataDto of this ServicesMetadataDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def animation_url(self):
        """Gets the animation_url of this ServicesMetadataDto.


        :return: The animation_url of this ServicesMetadataDto.
        :rtype: str
        """
        return self._animation_url

    @animation_url.setter
    def animation_url(self, animation_url):
        """Sets the animation_url of this ServicesMetadataDto.


        :param animation_url: The animation_url of this ServicesMetadataDto.
        :type animation_url: str
        """

        self._animation_url = animation_url

    @property
    def attributes(self):
        """Gets the attributes of this ServicesMetadataDto.


        :return: The attributes of this ServicesMetadataDto.
        :rtype: List[ModelsExposedMetadataAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ServicesMetadataDto.


        :param attributes: The attributes of this ServicesMetadataDto.
        :type attributes: List[ModelsExposedMetadataAttribute]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this ServicesMetadataDto.


        :return: The description of this ServicesMetadataDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServicesMetadataDto.


        :param description: The description of this ServicesMetadataDto.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def external_link(self):
        """Gets the external_link of this ServicesMetadataDto.


        :return: The external_link of this ServicesMetadataDto.
        :rtype: str
        """
        return self._external_link

    @external_link.setter
    def external_link(self, external_link):
        """Sets the external_link of this ServicesMetadataDto.


        :param external_link: The external_link of this ServicesMetadataDto.
        :type external_link: str
        """

        self._external_link = external_link

    @property
    def image(self):
        """Gets the image of this ServicesMetadataDto.


        :return: The image of this ServicesMetadataDto.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ServicesMetadataDto.


        :param image: The image of this ServicesMetadataDto.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def name(self):
        """Gets the name of this ServicesMetadataDto.


        :return: The name of this ServicesMetadataDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicesMetadataDto.


        :param name: The name of this ServicesMetadataDto.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
